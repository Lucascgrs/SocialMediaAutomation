from instagrapi import Client
import time
import random
import os
import json

class InstagramBot:
    def __init__(self):
        self.client = Client()
        self.utils_directory = os.getcwd() + '\\..\\utils'
        self.Connection_file_name = os.path.join(self.utils_directory, 'login_data.json')
        self.login_data = {}

    def login(self, account_identifier):
        try:
            self.get_user_login(account_identifier)
            self.client.login(account_identifier, self.login_data)
            print("[‚úî] Connexion r√©ussie")
        except Exception as e:
            print(f"[‚úò] Erreur connexion : {e}")

    # --------- UTILISATEUR ---------
    def get_user_info(self, username):
        """R√©cup√®re les infos d'un utilisateur (contourne le bug update_headers)"""
        try:
            user_id = self.client.user_id_from_username(username)
            info = self.client.user_info(user_id)
            return info.model_dump()
        except Exception as e:
            print(f"[‚úò] Impossible de r√©cup√©rer les infos pour {username} : {e}")
            return None

    def get_user_followers(self, username, amount=10):
        try:
            user_id = self.client.user_id_from_username(username)
            return self.client.user_followers(user_id, amount)
        except Exception as e:
            print(f"[‚úò] Erreur r√©cup√©ration followers : {e}")
            return []

    def get_user_following(self, username, amount=10):
        try:
            user_id = self.client.user_id_from_username(username)
            return self.client.user_following(user_id, amount)
        except Exception as e:
            print(f"[‚úò] Erreur r√©cup√©ration following : {e}")
            return []

    # --------- MESSAGES ---------
    def send_dm(self, username, message):
        try:

            user_id = self.client.user_id_from_username(username)

            self.client.direct_send(message, [user_id])
            print(f"[‚úî] Message envoy√© √† {user_id}")
        except Exception as e:
            print(f"[‚úò] Erreur envoi message : {e}")

    # --------- M√âDIA ---------
    def upload_photo(self, path, caption=""):
        try:
            self.client.photo_upload(path, caption)
            print("[‚úî] Photo envoy√©e")
        except Exception as e:
            print(f"[‚úò] Erreur upload photo : {e}")

    def upload_video(self, path, caption=""):
        """
        Upload vid√©o avec gestion des erreurs am√©lior√©e

        Args:
            path: Chemin vers le fichier vid√©o
            caption: L√©gende de la vid√©o
        """
        try:
            # Option 1: Utiliser l'upload avec thumbnail sp√©cifique
            import os
            from pathlib import Path

            video_path = Path(path)
            thumbnail_path = f"{path}.jpg"  # Le chemin vers la miniature est d√©j√† g√©n√©r√©

            # V√©rifier si la miniature existe, sinon cr√©er une
            if not os.path.exists(thumbnail_path):
                print(f"Thumbnail non trouv√©e, utilisant une miniature par d√©faut")
                # Utiliser la m√©thode int√©gr√©e qui essaie de cr√©er une thumbnail
                self.client.video_upload(path, caption)
            else:
                # Utiliser la miniature existante
                print(f"Utilisation de la thumbnail existante : {thumbnail_path}")
                self.client.video_upload(
                    path,
                    caption,
                    thumbnail=thumbnail_path
                )
            print("[‚úî] Vid√©o envoy√©e")

        except ValueError as ve:
            # G√©rer sp√©cifiquement l'erreur de validation Pydantic
            if "scans_profile" in str(ve):
                print("[!] Erreur API Instagram (scans_profile manquant)")
                print("[i] Essai avec la m√©thode alternative...")
                try:
                    # Option 2: Alternative - poster comme reels
                    self.client.clip_upload(path, caption)
                    print("[‚úî] Vid√©o envoy√©e comme Reels")
                    return
                except Exception as e2:
                    print(f"[‚úò] L'alternative a aussi √©chou√© : {e2}")
            print(f"[‚úò] Erreur upload vid√©o : {ve}")
        except Exception as e:
            print(f"[‚úò] Erreur upload vid√©o : {e}")

    def like_media(self, media_id):
        try:
            self.client.media_like(media_id)
            print(f"[‚úî] Like sur {media_id}")
        except Exception as e:
            print(f"[‚úò] Erreur like : {e}")

    def comment_media(self, media_id, comment):
        try:
            self.client.media_comment(media_id, comment)
            print(f"[‚úî] Commentaire post√© sur {media_id}")
        except Exception as e:
            print(f"[‚úò] Erreur commentaire : {e}")

    # --------- SUIVI ---------
    def follow_user(self, username):
        try:
            user_id = self.client.user_id_from_username(username)
            self.client.user_follow(user_id)
            print(f"[‚úî] Suivi de {username}")
        except Exception as e:
            print(f"[‚úò] Erreur follow : {e}")

    def unfollow_user(self, username):
        try:
            user_id = self.client.user_id_from_username(username)
            self.client.user_unfollow(user_id)
            print(f"[‚úî] Unfollow de {username}")
        except Exception as e:
            print(f"[‚úò] Erreur unfollow : {e}")

    # --------- STORIES ---------
    def upload_story(self, path):
        try:
            self.client.photo_upload_to_story(path)
            print("[‚úî] Story envoy√©e")
        except Exception as e:
            print(f"[‚úò] Erreur story : {e}")

    # --------- UTILITAIRES ---------
    def sleep_random(self, min_sec=2, max_sec=5):
        t = random.randint(min_sec, max_sec)
        print(f"[‚è≥] Pause {t} secondes...")
        time.sleep(t)

    def get_user_login(self, account_identifier):
        try:
            login_data_file = open(self.Connection_file_name, 'r')
            self.login_data = json.load(login_data_file)['Instagram'][account_identifier]
            login_data_file.close()
        except:
            print("Identifiants de connexion non trouv√©s, veuillez les ajouter dans le fichier 'login_data.json' dans le dossier utils.")


def StartInstagramBot(account_identifier):
    bot = InstagramBot()
    bot.login(account_identifier)
    return bot


"""bot = StartInstagramBot("elodie__.bqt")

user_info = bot.get_user_info("instagram")
if user_info:
    print(f"Nom complet : {user_info.get('full_name')}")
    print(f"Bio : {user_info.get('biography')}")

# 7. Test DM (‚ö† √† remplacer par un vrai username)
print("\n=== Message priv√© ===")
bot.send_dm("lucas_cgrs", "üì© Test DM via instagrapi")"""